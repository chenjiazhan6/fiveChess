package com.company;

import javafx.scene.control.ComboBox;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Listener extends MouseAdapter implements ActionListener {
    private static final int ROWS = 15;
    private static final int COLS = 15;
    /**
     * 用来存储该游戏此时是否已经开始
     * 当gameOver为1时，游戏还没开始
     * 当gameOver为0时，游戏开始
     */
    private int gameOver = 1;
    /**
     * 此时创建这个对象就没有什么用处了
     * 还是有点用的
     */
    /**
     * 黑棋用1来表示
     * 白棋用-1来表示
     */
    private int[][] board = new int[ROWS][COLS];
    private Point[] points = new Point[(ROWS+1)*(COLS+1)];
    int getX,getY;
    private JPanel chessBOard = null;
    private String fontname = "人人对战";
    /**
     * 用于记录此时有多少个棋子
     * 我都想要把所有的监视器搬到这边了
     * 这两个对象也太多要相互交流的东西了吧
     * 是不是在构造器中初始化就可以指向同一块内存了呢。。。。
     */
    private int chessCount = 0;

    /**
     * 设定当达到5子连在一起时，便决出胜负
     */
    private static final int WIN_NUM = 5;
    /**
     * 当flag为0时，下白棋
     * 当flag为1时，下黑棋
     */
    private int flag = 0;
    public Listener(JPanel chessBOard,int[][] board){
        this.chessBOard = chessBOard;
        this.board = board;
    }
    /**
     * 这个用来判断是否能够五子连珠，使用isWIN这个方法
     * @param board
     * @param x
     * @param y
     * @param flag
     * @return
     */
    public boolean isWIN(int[][] board,int x,int y,int flag){
        if(vertical(x,y,board,flag)||panenal(x,y,flag,board)||oblique(x,y,board,flag))
            return true;
        else
            return false;
    }

    /**
     * 下方的这四个private方法均是对isWIn这个方法的诠释
     * @param x
     * @param y
     * @param board
     * @param flag
     * @return
     */
    private boolean vertical(int x,int y,int[][] board, int flag){
        int j = y;
        int num = 0;
        while(board[x][j] == flag &&j>=0){
            j--;
            num++;
        }
        j = y + 1;
        while(board[x][j] == flag &&j<COLS){
            j++;
            num++;
        }
        if(num>=WIN_NUM)
            return true;
        else
            return false;
    }


    private boolean panenal(int x,int y,int flag,int[][] board){
        int i = x;
        int num = 0;
        while(board[i][y] == flag &&i>=0){
            i--;
            num++;
        }
        i = x + 1;
        while(board[i][y] == flag &&i<ROWS){
            i++;
            num++;
        }
        if(num >= WIN_NUM)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    private boolean oblique(int x,int y,int[][] board,int flag){
        if(Upperleft(x,y,board,flag)|| Upperright(x,y,board,flag)){
            return true;
        }
        else{
            return false;
        }

    }
    private boolean Upperleft(int x,int y,int[][] board,int flag){
        int i = x, j = y;
        int num = 0;
        while(board[i][j] == flag&&i >= 0 && j >= 0){
            i--;
            j--;
            num++;
        }
        i = x + 1;
        j = y + 1;
        while(board[i][j] == flag &&i < ROWS && j < COLS){
            i++;
            j++;
            num++;
        }
        if(num >= WIN_NUM)
            return true;
        else
            return false;
    }
    private boolean Upperright(int x,int y,int[][] board,int flag){
        int i = x, j = y;
        int num = 0;
        while(board[i][j] == flag &&i < ROWS && j >= 0){
            i++;
            j--;
            num++;
        }
        i = x + 1;
        j = y + 1;
        while(board[i][j] == flag &&i >= 0 && j < COLS){
            i--;
            j++;
            num++;
        }
        if(num >= WIN_NUM)
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    public void mousePressed(MouseEvent e){
        /**
         * 此时获得的这个x,y均是绝对像素的位置
         * 需要对其进行装换才可以
         */
        int x = e.getX();
        int y = e.getY();
        if(iscoordinate(x,y))
        {
            if(gameOver == 0){
                if(fontname.equals("人人对战")){
                    pvp(x,y);
                }
                /**
                 * 这个进行的是人机对战
                 */
                else if(fontname.equals("人机对战")){

                }
            }
        }
    }
    /**
     * 只有当这个点是在这个棋盘的坐标的时候
     * 才符合标准，棋子才能被画
     * @param x
     * @param y
     * @return
     */
    private boolean iscoordinate(int x,int y){

    }



    private void goBack(){
        chessCount--;
        getX = points[chessCount].getx();
        getY = points[chessCount].gety();
        /**
         * 存入points均是坐标点上的坐标，不是像素的位置，而是在第几格
         */
        board[getX][getY] = 0;
        points[chessCount] = null;
        chessBOard.repaint();
    }
    private void pvp(int x,int y){
        /**
         * 下一颗棋子
         */
            playChess(x,y);
            chessBOard.repaint();
        /**
         * 判断此时是否已经胜利
         */
        if(isWIN(board,x,y,flag)){
                Win();
                return;
            }
        /**
         * 没有的话就轮到另一方进行下棋；
         */
        changesole();
    }

    /**
     * 这个用于实现认输的功能的
     * Win和fail中的大量逻辑相同，能否对其进行修改呢
     */
    private void Win(){
        if(flag == 1){
            String msg = String.format("%s赢了","黑棋");
            JOptionPane.showMessageDialog(chessBOard,msg);
            gameOver = 1;
        }
        else if(flag == 0) {
            String msg = String.format("%s赢了","白棋");
            JOptionPane.showMessageDialog(chessBOard,msg);
            gameOver = 1;
        }
    }

    /**
     * 用于实现在认输这个功能
     * flag = 1 是黑棋在下，所以这里的逻辑是白棋赢了
     * flag = 0 是白棋在下，所以这里的逻辑是黑棋赢了
     */
    private void fail(){
        if(flag == 0){
            String msg = String.format("%s赢了","黑棋");
            JOptionPane.showMessageDialog(chessBOard,msg);
            gameOver = 1;
        }
        else if(flag == 1) {
            String msg = String.format("%s赢了","白棋");
            JOptionPane.showMessageDialog(chessBOard,msg);
            gameOver = 1;
        }
    }
    /**
     * 每次下完棋都要对其进行转换角色
     * 这次下白棋，下次就下黑棋
     */
    private void changesole(){
        if(flag == 1){
            flag = 0;
        }
        else if(flag == 0){
            flag = 1;
        }
    }
    /**
     * 下一颗棋子在棋盘上面，实现底层存储即可，无需实现其他功能
     * @param x
     * @param y
     */
    private void playChess(int x,int y){
        if(flag == 0)
        {
            Point point = new Point(x,y,0);
            points[chessCount] = point;
            chessCount++;
            board[x][y] = -1;
        }
        else if(flag == 1){
            Point point = new Point(x,y,1);
            points[chessCount] = point;
            chessCount++;
            board[x][y] = 1;
        }
    }
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("开始游戏")) {
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[i].length; j++) {
                    board[i][j] = 0;
                }
            }
            gameOver = 0;
        }
        /**
         * 悔棋就是回到上一步
         */
        else if (e.getActionCommand().equals("悔棋")) {
            /**
             *  if (gameOver == 1) {
             *                 return;
             *             }
             *             else {
             */

                if(chessCount == 0) {
                    return;
                }
                else{
                    goBack();
                }
        }
        else if (e.getActionCommand().equals("认输")) {
            if (gameOver == 0) {
                return;
            }
            else if(gameOver == 1){
                fail();
            }
        }
        else if (e.getActionCommand().equals("退出")) {

        }
        else if (e.getSource() instanceof JComboBox) {
            if (gameOver == 1) {
                JComboBox<String> comboBox = (JComboBox) e.getSource();// 拿到对象
                fontname = comboBox.getSelectedItem().toString();// 拿到内容
                System.out.println("选择了这个面板的内容！" + fontname);
                System.out.println(fontname);
            }
            else{
                String msg = String.format("%s,不可选择对战类型","对战已经开始");
                JOptionPane.showMessageDialog(chessBOard,msg);
            }
        }
    }

        /**
         *  panel.setPreferredSize(new Dimension(150,0));
         *         JButton regret = new JButton("悔棋");
         *         regret.setPreferredSize(new Dimension(120,100));
         *         JButton  giveup = new JButton("认输");
         *         giveup.setPreferredSize(new Dimension(120,100));
         *         JButton start = new JButton("开始游戏");
         *         start.setPreferredSize(new Dimension(120,100));
         *         JButton  exit = new JButton("退出");
         *         exit.setPreferredSize(new Dimension(120,100));
         */

    }