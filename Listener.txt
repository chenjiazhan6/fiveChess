package com.company;

import javafx.scene.control.ComboBox;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Listener extends MouseAdapter implements ActionListener {
    private static final int ROWS = 15;
    private static final int COLS = 15;
    /**
     * 用来存储该游戏此时是否已经开始
     * 当gameOver为1时，游戏还没开始
     * 当gameOver为0时，游戏开始
     */
    private int gameOver = 1;
    /**
     * 此时创建这个对象就没有什么用处了
     * 还是有点用的
     */
    private int[][] board = new int[ROWS][COLS];
    private JPanel chessBOard = null;
    private String fontname = "人人对战";
    /**
     * 用于记录此时有多少个棋子
     * 我都想要把所有的监视器搬到这边了
     * 这两个对象也太多要相互交流的东西了吧
     */
    private int chessCount = 0;

    /**
     * 设定当达到5子连在一起时，便决出胜负
     */
    private static final int WIN_NUM = 5;
    /**
     * 当flag为0时，下白棋
     * 当flag为1时，下黑棋
     */
    private int flag = 0;
    public Listener(JPanel chessBOard,int[][] board){
        this.chessBOard = chessBOard;
        this.board = board;
    }
    /**
     * 这个用来判断是否能够五子连珠，使用isWIN这个方法
     * @param board
     * @param x
     * @param y
     * @param flag
     * @return
     */
    public boolean isWIN(int[][] board,int x,int y,int flag){
        if(vertical(x,y,board,flag)||panenal(x,y,flag,board)||oblique(x,y,board,flag))
            return true;
        else
            return false;
    }
    private boolean vertical(int x,int y,int[][] board, int flag){
        int j = y;
        int num = 0;
        while(board[x][j] == flag &&j>=0){
            j--;
            num++;
        }
        j = y + 1;
        while(board[x][j] == flag &&j<COLS){
            j++;
            num++;
        }
        if(num>=WIN_NUM)
            return true;
        else
            return false;
    }


    private boolean panenal(int x,int y,int flag,int[][] board){
        int i = x;
        int num = 0;
        while(board[i][y] == flag &&i>=0){
            i--;
            num++;
        }
        i = x + 1;
        while(board[i][y] == flag &&i<ROWS){
            i++;
            num++;
        }
        if(num >= WIN_NUM)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    private boolean oblique(int x,int y,int[][] board,int flag){
        if(Upperleft(x,y,board,flag)|| Upperright(x,y,board,flag)){
            return true;
        }
        else{
            return false;
        }

    }
    private boolean Upperleft(int x,int y,int[][] board,int flag){
        int i = x, j = y;
        int num = 0;
        while(board[i][j] == flag&&i >= 0 && j >= 0){
            i--;
            j--;
            num++;
        }
        i = x + 1;
        j = y + 1;
        while(board[i][j] == flag &&i < ROWS && j < COLS){
            i++;
            j++;
            num++;
        }
        if(num >= WIN_NUM)
            return true;
        else
            return false;
    }
    private boolean Upperright(int x,int y,int[][] board,int flag){
        int i = x, j = y;
        int num = 0;
        while(board[i][j] == flag &&i < ROWS && j >= 0){
            i++;
            j--;
            num++;
        }
        i = x + 1;
        j = y + 1;
        while(board[i][j] == flag &&i >= 0 && j < COLS){
            i--;
            j++;
            num++;
        }
        if(num >= WIN_NUM)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    public void mousePressed(MouseEvent movement){
    }
    public void actionPerformed(ActionEvent e){
        if(e.getActionCommand().equals("开始游戏")){
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[i].length; j++) {
                    board[i][j] = 0;
                }
            }
            gameOver = 1;
        }
        else if(e.getActionCommand().equals("悔棋")){

        }
        else if(e.getActionCommand().equals("认输")){

        }
        else if(e.getActionCommand().equals("退出")){

        }
        else if(e.getSource()instanceof JComboBox){
            if(gameOver == 1)
            {
                JComboBox<String> comboBox = (JComboBox) e.getSource();// 拿到对象
                fontname = comboBox.getSelectedItem().toString();// 拿到内容
                System.out.println("选择了这个面板的内容！" + fontname);
                System.out.println(fontname);
            }
            else if(gameOver == 0){
                String msg = String.format("游戏已经开始，%s" + "不要再选择对战方式");
            }

        }
        /**
         *  panel.setPreferredSize(new Dimension(150,0));
         *         JButton regret = new JButton("悔棋");
         *         regret.setPreferredSize(new Dimension(120,100));
         *         JButton  giveup = new JButton("认输");
         *         giveup.setPreferredSize(new Dimension(120,100));
         *         JButton start = new JButton("开始游戏");
         *         start.setPreferredSize(new Dimension(120,100));
         *         JButton  exit = new JButton("退出");
         *         exit.setPreferredSize(new Dimension(120,100));
         */
    }



}
